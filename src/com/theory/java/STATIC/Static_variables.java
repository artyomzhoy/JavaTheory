package com.theory.java.STATIC;

@1.Статические переменные

/**
 * Чтобы создать статическую переменную класса, нужно перед ее именем написать ключевое слово static.
 * Общий вид объявления статической переменной такой:
 */

public static Тип имя=значение; или public static int something=5;


/** Если статической переменной не присвоить стартовое значение,
 она инициализируется значением по умолчанию для текущего типа:*/

public static int WIDTH=100; // - значение присвоено.

// или

public static int WIDTH; // - значение не присвоено.
public static int WIDTH=0; // - значение по умолчанию для типа int.

/** Обращаться к статической переменной в ее классе можно просто по имени.
 Если обращение идет из другого класса, то перед именем статической переменной нужно писать имя класса.*/

ИмяКласса.переменая или OtherClass.something

public class Static_variables {

    public static int someStatic = 10;

    public static void main(String[] args) {

        System.out.println(someStatic);
        System.out.println(OtherClass.something);

    }
}

class OtherClass {

    public static int something = 5;

}

@2.Отличие статических и нестатических переменных

/** Нестатические (обычные) переменные класса объявляются точно так же,
 как статические, только без ключевого слова static.*/

        int someStatic=10; // - нестатическая переменная класса.
static int someStatic=10; // - статическая переменная класса.

/** Чем же отличаются обычные и статические переменные?

 <p>Обычные переменные класса привязаны к объектам своего класса (экземплярам класса),
 статические переменные — к статическому объекту класса. */

class Box { // класс Box описывает коробку.

    double width; // переменные, описывающие коробку.
    double height;
    double depth;

    double volume = 100; // переменная с заданным значением;
    public static double volume2 = 200; // статическая переменная с заданным значением;
}

class MyBox {
    public static void main(String[] args) {
        Box myBox; // Эта переменная не определяет объект. Она является лишь переменной, которая может ссылаться на объект.
        myBox = new Box(); // Мы создали объект класса Box. Всем переменным класса Box присваивается значение по умолчанию.

        // Или можно сделать так - Box myBox = new Box();

        /** Для того чтобы обратиться к переменной класса и изменить ее или получить значение, используется имя переменной объекта:*/

        myBox.width = 10;
        myBox.depth = 10;
        myBox.height = 10;

        /** Обращаться к обычным переменным класса (полям класса) можно только имея ссылку на объект класса.
         Ну или в методах внутри этого же класса.*/
        System.out.println(myBox.volume); // Обращение к переменной объекта myBox класса Box с использованием ссылки на объект класса.

        /** Обращаться к статическим переменным можно откуда угодно (с учетом модификаторов видимости):
         из обычных методов, из статических методов того же класса, из методов других классов и т.п.*/
        System.out.println(Box.volume2); // Обращение к статической переменной класса Box не используя ссылку на объект класса.
    }
}


/** Если экземпляров класса несколько, в каждом из них существует своя копия нестатических (обычных) переменных класса.
 Статические переменные класса всегда находятся внутри статического объекта класса и существуют только в одном экземпляре.*/